{"version":3,"file":"scripts/5f94193bd4ff44c494fc.pnpm.d3-dsv.js","mappings":"sJAEIA,GAAM,E,UAAA,GAAI,KAEHC,EAAWD,EAAIE,MACfC,EAAeH,EAAII,UACPJ,EAAIK,OACAL,EAAIM,WACJN,EAAIO,WACLP,EAAIQ,UACFR,EAAIS,a,gCCVhC,IAAIC,EAAM,GACNC,EAAM,GAKV,SAASC,EAAgBC,GACvB,OAAO,IAAIC,SAAS,IAAK,WAAaD,EAAQE,KAAI,SAASC,EAAMC,GAC/D,OAAOC,KAAKC,UAAUH,GAAQ,OAASC,EAAI,aAC1CG,KAAK,KAAO,KAWjB,SAASC,EAAaC,GACpB,IAAIC,EAAYC,OAAOC,OAAO,MAC1BZ,EAAU,GAUd,OARAS,EAAKI,SAAQ,SAASC,GACpB,IAAK,IAAIC,KAAUD,EACXC,KAAUL,GACdV,EAAQgB,KAAKN,EAAUK,GAAUA,MAKhCf,EAGT,SAASiB,EAAIC,EAAOC,GAClB,IAAIC,EAAIF,EAAQ,GAAIG,EAASD,EAAEC,OAC/B,OAAOA,EAASF,EAAQ,IAAIG,MAAMH,EAAQE,EAAS,GAAGd,KAAK,GAAKa,EAAIA,EAsBvD,WAASG,GACtB,IAAIC,EAAW,IAAIC,OAAO,KAAQF,EAAY,SAC1CG,EAAYH,EAAUI,WAAW,GAWrC,SAASpC,EAAUqC,EAAMC,GACvB,IAIIC,EAJArB,EAAO,GACPsB,EAAIH,EAAKP,OACTW,EAAI,EACJC,EAAI,EAEJC,EAAMH,GAAK,EACXI,GAAM,EAMV,SAASC,IACP,GAAIF,EAAK,OAAOpC,EAChB,GAAIqC,EAAK,OAAOA,GAAM,EAAOtC,EAG7B,IAAIO,EAAUiC,EAAPC,EAAIN,EACX,GAzFM,KAyFFJ,EAAKD,WAAWW,GAAc,CAChC,KAAON,IAAMD,GA1FT,KA0FcH,EAAKD,WAAWK,IA1F9B,KA0F8CJ,EAAKD,aAAaK,KAIpE,OAHK5B,EAAI4B,IAAMD,EAAGG,GAAM,EA1FlB,MA2FIG,EAAIT,EAAKD,WAAWK,MAAmBG,GAAM,EA1FlD,KA2FIE,IAAgBF,GAAM,EA5FzB,KA4FmCP,EAAKD,WAAWK,MAAkBA,GACpEJ,EAAKW,MAAMD,EAAI,EAAGlC,EAAI,GAAGoC,QAAQ,MAAO,KAIjD,KAAOR,EAAID,GAAG,CACZ,GAlGM,MAkGDM,EAAIT,EAAKD,WAAWvB,EAAI4B,MAAmBG,GAAM,OACjD,GAlGA,KAkGIE,EAAgBF,GAAM,EAnGzB,KAmGmCP,EAAKD,WAAWK,MAAkBA,OACtE,GAAIK,IAAMX,EAAW,SAC1B,OAAOE,EAAKW,MAAMD,EAAGlC,GAIvB,OAAO8B,GAAM,EAAMN,EAAKW,MAAMD,EAAGP,GAGnC,IA5GU,KA+ENH,EAAKD,WAAWI,EAAI,MAAkBA,EA9EjC,KA+ELH,EAAKD,WAAWI,EAAI,MAAiBA,GA4BjCD,EAAIM,OAAatC,GAAK,CAE5B,IADA,IAAIgB,EAAM,GACHgB,IAAMjC,GAAOiC,IAAMhC,GAAKgB,EAAIE,KAAKc,GAAIA,EAAIM,IAC5CP,GAA4B,OAAtBf,EAAMe,EAAEf,EAAKmB,OACvBxB,EAAKO,KAAKF,GAGZ,OAAOL,EAGT,SAASgC,EAAchC,EAAMT,GAC3B,OAAOS,EAAKP,KAAI,SAASY,GACvB,OAAOd,EAAQE,KAAI,SAASa,GAC1B,OAAOnB,EAAYkB,EAAIC,OACtBR,KAAKgB,MAkBZ,SAAS5B,EAAUmB,GACjB,OAAOA,EAAIZ,IAAIN,GAAaW,KAAKgB,GAGnC,SAAS3B,EAAYsB,GACnB,OAAgB,MAATA,EAAgB,GACjBA,aAAiBwB,MAtGrBC,GADcC,EAuGyB1B,GAtG1B2B,cACbC,EAAUF,EAAKG,gBACfC,EAAUJ,EAAKK,gBACfC,EAAeN,EAAKO,qBACjBC,MAAMR,GAAQ,iBAXHS,EAYDT,EAAKU,kBAXR,EAAI,IAAMrC,GAAKoC,EAAM,GAC/BA,EAAO,KAAO,IAAMpC,EAAIoC,EAAM,GAC9BpC,EAAIoC,EAAM,IAS+B,IAAMpC,EAAI2B,EAAKW,cAAgB,EAAG,GAAK,IAAMtC,EAAI2B,EAAKY,aAAc,IAC1GN,EAAe,IAAMjC,EAAI0B,EAAO,GAAK,IAAM1B,EAAI6B,EAAS,GAAK,IAAM7B,EAAI+B,EAAS,GAAK,IAAM/B,EAAIiC,EAAc,GAAK,IACnHF,EAAU,IAAM/B,EAAI0B,EAAO,GAAK,IAAM1B,EAAI6B,EAAS,GAAK,IAAM7B,EAAI+B,EAAS,GAAK,IAChFF,GAAWH,EAAQ,IAAM1B,EAAI0B,EAAO,GAAK,IAAM1B,EAAI6B,EAAS,GAAK,IACjE,KA8FEtB,EAASiC,KAAKvC,GAAS,IAAM,IAAOA,EAAMsB,QAAQ,KAAM,MAAU,IAClEtB,EAzGV,IAAoB0B,EANAS,EAOdV,EACAG,EACAE,EACAE,EAwGJ,MAAO,CACL7D,MA5FF,SAAeuC,EAAMC,GACnB,IAAI6B,EAAS1D,EAASS,EAAOlB,EAAUqC,GAAM,SAASd,EAAKV,GACzD,GAAIsD,EAAS,OAAOA,EAAQ5C,EAAKV,EAAI,GACrCJ,EAAUc,EAAK4C,EAAU7B,EAtD/B,SAAyB7B,EAAS6B,GAChC,IAAI8B,EAAS5D,EAAgBC,GAC7B,OAAO,SAASc,EAAKV,GACnB,OAAOyB,EAAE8B,EAAO7C,GAAMV,EAAGJ,IAmDM4D,CAAgB9C,EAAKe,GAAK9B,EAAgBe,MAGzE,OADAL,EAAKT,QAAUA,GAAW,GACnBS,GAuFPlB,UAAWA,EACXC,OA5BF,SAAgBiB,EAAMT,GAEpB,OADe,MAAXA,IAAiBA,EAAUQ,EAAaC,IACrC,CAACT,EAAQE,IAAIN,GAAaW,KAAKgB,IAAYsC,OAAOpB,EAAchC,EAAMT,IAAUO,KAAK,OA2B5Fd,WAxBF,SAAoBgB,EAAMT,GAExB,OADe,MAAXA,IAAiBA,EAAUQ,EAAaC,IACrCgC,EAAchC,EAAMT,GAASO,KAAK,OAuBzCb,WApBF,SAAoBe,GAClB,OAAOA,EAAKP,IAAIP,GAAWY,KAAK,OAoBhCZ,UAAWA,EACXC,YAAaA,K,8CC/JbkE,GAAM,E,UAAA,GAAI,MAEHC,EAAWD,EAAIzE,MACf2E,EAAeF,EAAIvE,UACPuE,EAAItE,OACAsE,EAAIrE,WACJqE,EAAIpE,WACLoE,EAAInE,UACFmE,EAAIlE","sources":["webpack://internetactivities/./node_modules/d3-dsv/src/csv.js","webpack://internetactivities/./node_modules/d3-dsv/src/dsv.js","webpack://internetactivities/./node_modules/d3-dsv/src/tsv.js"],"sourcesContent":["import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\nexport var tsvFormatRow = tsv.formatRow;\nexport var tsvFormatValue = tsv.formatValue;\n"],"names":["csv","csvParse","parse","csvParseRows","parseRows","format","formatBody","formatRows","formatRow","formatValue","EOL","EOF","objectConverter","columns","Function","map","name","i","JSON","stringify","join","inferColumns","rows","columnSet","Object","create","forEach","row","column","push","pad","value","width","s","length","Array","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","text","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","Date","hours","date","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","year","getUTCFullYear","getUTCMonth","getUTCDate","test","convert","object","customConverter","concat","tsv","tsvParse","tsvParseRows"],"sourceRoot":""}