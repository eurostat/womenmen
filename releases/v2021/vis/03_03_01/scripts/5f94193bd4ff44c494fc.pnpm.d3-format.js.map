{"version":3,"file":"scripts/5f94193bd4ff44c494fc.pnpm.d3-format.js","mappings":"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","sources":["webpack://internetactivities/./node_modules/d3-format/src/formatPrefixAuto.js","webpack://internetactivities/./node_modules/d3-format/src/formatRounded.js","webpack://internetactivities/./node_modules/d3-format/src/formatTypes.js","webpack://internetactivities/./node_modules/d3-format/src/identity.js","webpack://internetactivities/./node_modules/d3-format/src/locale.js","webpack://internetactivities/./node_modules/d3-format/src/defaultLocale.js","webpack://internetactivities/./node_modules/d3-format/src/formatGroup.js","webpack://internetactivities/./node_modules/d3-format/src/formatNumerals.js","webpack://internetactivities/./node_modules/d3-format/src/formatTrim.js","webpack://internetactivities/./node_modules/d3-format/src/exponent.js","webpack://internetactivities/./node_modules/d3-format/src/formatDecimal.js","webpack://internetactivities/./node_modules/d3-format/src/formatSpecifier.js","webpack://internetactivities/./node_modules/d3-format/src/precisionFixed.js","webpack://internetactivities/./node_modules/d3-format/src/precisionPrefix.js","webpack://internetactivities/./node_modules/d3-format/src/precisionRound.js"],"sourcesContent":["import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n"],"names":["prefixExponent","x","p","d","formatDecimal","coefficient","exponent","Array","join","length","slice","toFixed","Math","round","toString","toExponential","toPrecision","formatRounded","i","max","min","floor","n","toUpperCase","format","formatPrefix","map","prototype","prefixes","locale","grouping","thousands","group","undefined","identity","call","Number","value","width","t","j","g","push","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","replace","formatNumerals","String","percent","minus","nan","newFormat","specifier","fill","formatSpecifier","align","sign","symbol","zero","comma","precision","trim","type","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","c","valuePrefix","valueSuffix","valueNegative","isNaN","abs","s","out","i1","i0","formatTrim","charCodeAt","Infinity","padding","f","e","k","pow","NaN","toLocaleString","formatDecimalParts","indexOf","re","match","exec","Error","FormatSpecifier","this","step"],"sourceRoot":""}